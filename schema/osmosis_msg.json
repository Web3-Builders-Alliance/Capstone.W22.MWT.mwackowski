{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "OsmosisMsg",
  "description": "A number of Custom messages that can call into the Osmosis bindings",
  "oneOf": [
    {
      "description": "CreateDenom creates a new factory denom, of denomination: factory/{creating contract bech32 address}/{Subdenom} Subdenom can be of length at most 44 characters, in [0-9a-zA-Z./] Empty subdenoms are valid. The (creating contract address, subdenom) pair must be unique. The created denom's admin is the creating contract address, but this admin can be changed using the UpdateAdmin binding.",
      "type": "object",
      "required": [
        "create_denom"
      ],
      "properties": {
        "create_denom": {
          "type": "object",
          "required": [
            "subdenom"
          ],
          "properties": {
            "subdenom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ChangeAdmin changes the admin for a factory denom. Can only be called by the current contract admin. If the NewAdminAddress is empty, the denom will have no admin.",
      "type": "object",
      "required": [
        "change_admin"
      ],
      "properties": {
        "change_admin": {
          "type": "object",
          "required": [
            "denom",
            "new_admin_address"
          ],
          "properties": {
            "denom": {
              "type": "string"
            },
            "new_admin_address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Contracts can mint native tokens for an existing factory denom that they are the admin of.",
      "type": "object",
      "required": [
        "mint_tokens"
      ],
      "properties": {
        "mint_tokens": {
          "type": "object",
          "required": [
            "amount",
            "denom",
            "mint_to_address"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            },
            "mint_to_address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Contracts can burn native tokens for an existing factory denom that they are the admin of. Currently, the burn from address must be the admin contract.",
      "type": "object",
      "required": [
        "burn_tokens"
      ],
      "properties": {
        "burn_tokens": {
          "type": "object",
          "required": [
            "amount",
            "burn_from_address",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "burn_from_address": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swap over one or more pools Returns SwapResponse in the data field of the Response",
      "type": "object",
      "required": [
        "swap"
      ],
      "properties": {
        "swap": {
          "type": "object",
          "required": [
            "amount",
            "first",
            "route"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/SwapAmountWithLimit"
            },
            "first": {
              "$ref": "#/definitions/Swap"
            },
            "route": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Step"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Step": {
      "type": "object",
      "required": [
        "denom_out",
        "pool_id"
      ],
      "properties": {
        "denom_out": {
          "type": "string"
        },
        "pool_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Swap": {
      "type": "object",
      "required": [
        "denom_in",
        "denom_out",
        "pool_id"
      ],
      "properties": {
        "denom_in": {
          "type": "string"
        },
        "denom_out": {
          "type": "string"
        },
        "pool_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "SwapAmountWithLimit": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "exact_in"
          ],
          "properties": {
            "exact_in": {
              "type": "object",
              "required": [
                "input",
                "min_output"
              ],
              "properties": {
                "input": {
                  "$ref": "#/definitions/Uint128"
                },
                "min_output": {
                  "$ref": "#/definitions/Uint128"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "exact_out"
          ],
          "properties": {
            "exact_out": {
              "type": "object",
              "required": [
                "max_input",
                "output"
              ],
              "properties": {
                "max_input": {
                  "$ref": "#/definitions/Uint128"
                },
                "output": {
                  "$ref": "#/definitions/Uint128"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
