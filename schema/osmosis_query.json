{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "OsmosisQuery",
  "oneOf": [
    {
      "description": "Given a subdenom created by the address `creator_addr` via `OsmosisMsg::CreateDenom`, returns the full denom as used by `BankMsg::Send`. You may call `FullDenom { creator_addr: env.contract.address, subdenom }` to find the denom issued by the current contract.",
      "type": "object",
      "required": [
        "full_denom"
      ],
      "properties": {
        "full_denom": {
          "type": "object",
          "required": [
            "creator_addr",
            "subdenom"
          ],
          "properties": {
            "creator_addr": {
              "type": "string"
            },
            "subdenom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "For a given pool ID, list all tokens traded on it with current liquidity (spot). As well as the total number of LP shares and their denom",
      "type": "object",
      "required": [
        "pool_state"
      ],
      "properties": {
        "pool_state": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Return current spot price swapping In for Out on given pool ID. Warning: this can easily be manipulated via sandwich attacks, do not use as price oracle. We will add TWAP for more robust price feed.",
      "type": "object",
      "required": [
        "spot_price"
      ],
      "properties": {
        "spot_price": {
          "type": "object",
          "required": [
            "swap",
            "with_swap_fee"
          ],
          "properties": {
            "swap": {
              "$ref": "#/definitions/Swap"
            },
            "with_swap_fee": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Return current spot price swapping In for Out on given pool ID. You can call `EstimateSwap { contract: env.contract.address, ... }` to set sender to the current contract. Warning: this can easily be manipulated via sandwich attacks, do not use as price oracle. We will add TWAP for more robust price feed.",
      "type": "object",
      "required": [
        "estimate_swap"
      ],
      "properties": {
        "estimate_swap": {
          "type": "object",
          "required": [
            "amount",
            "first",
            "route",
            "sender"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/SwapAmount"
            },
            "first": {
              "$ref": "#/definitions/Swap"
            },
            "route": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Step"
              }
            },
            "sender": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "arithmetic_twap"
      ],
      "properties": {
        "arithmetic_twap": {
          "type": "object",
          "required": [
            "base_asset_denom",
            "end_time",
            "id",
            "quote_asset_denom",
            "start_time"
          ],
          "properties": {
            "base_asset_denom": {
              "type": "string"
            },
            "end_time": {
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "quote_asset_denom": {
              "type": "string"
            },
            "start_time": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "arithmetic_twap_to_now"
      ],
      "properties": {
        "arithmetic_twap_to_now": {
          "type": "object",
          "required": [
            "base_asset_denom",
            "id",
            "quote_asset_denom",
            "start_time"
          ],
          "properties": {
            "base_asset_denom": {
              "type": "string"
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "quote_asset_denom": {
              "type": "string"
            },
            "start_time": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Step": {
      "type": "object",
      "required": [
        "denom_out",
        "pool_id"
      ],
      "properties": {
        "denom_out": {
          "type": "string"
        },
        "pool_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Swap": {
      "type": "object",
      "required": [
        "denom_in",
        "denom_out",
        "pool_id"
      ],
      "properties": {
        "denom_in": {
          "type": "string"
        },
        "denom_out": {
          "type": "string"
        },
        "pool_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "SwapAmount": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "in"
          ],
          "properties": {
            "in": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "out"
          ],
          "properties": {
            "out": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
