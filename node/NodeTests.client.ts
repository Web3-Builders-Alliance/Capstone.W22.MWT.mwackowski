/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, SwapAmountInRoute, Coin, QueryMsg, Timestamp, MigrateMsg, ArithmeticTwapResponse, QueryEpochsInfoResponse, EpochInfo, Duration, QueryMapResponse, QueryNumPoolsResponse, QueryPoolResponse, Any, QueryPoolParamsResponse } from "./NodeTests.types";
export interface NodeTestsReadOnlyInterface {
  contractAddress: string;
  queryNumPools: () => Promise<QueryNumPoolsResponse>;
  queryEpochsInfo: () => Promise<QueryEpochsInfoResponse>;
  queryPool: ({
    poolId
  }: {
    poolId: number;
  }) => Promise<QueryPoolResponse>;
  queryPoolParams: ({
    poolId
  }: {
    poolId: number;
  }) => Promise<QueryPoolParamsResponse>;
  queryArithmeticTwap: ({
    baseAsset,
    endTime,
    poolId,
    quoteAsset,
    startTime
  }: {
    baseAsset: string;
    endTime?: Timestamp;
    poolId: number;
    quoteAsset: string;
    startTime?: Timestamp;
  }) => Promise<ArithmeticTwapResponse>;
  queryMap: ({
    key
  }: {
    key: string;
  }) => Promise<QueryMapResponse>;
}
export class NodeTestsQueryClient implements NodeTestsReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryNumPools = this.queryNumPools.bind(this);
    this.queryEpochsInfo = this.queryEpochsInfo.bind(this);
    this.queryPool = this.queryPool.bind(this);
    this.queryPoolParams = this.queryPoolParams.bind(this);
    this.queryArithmeticTwap = this.queryArithmeticTwap.bind(this);
    this.queryMap = this.queryMap.bind(this);
  }

  queryNumPools = async (): Promise<QueryNumPoolsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_num_pools: {}
    });
  };
  queryEpochsInfo = async (): Promise<QueryEpochsInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_epochs_info: {}
    });
  };
  queryPool = async ({
    poolId
  }: {
    poolId: number;
  }): Promise<QueryPoolResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_pool: {
        pool_id: poolId
      }
    });
  };
  queryPoolParams = async ({
    poolId
  }: {
    poolId: number;
  }): Promise<QueryPoolParamsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_pool_params: {
        pool_id: poolId
      }
    });
  };
  queryArithmeticTwap = async ({
    baseAsset,
    endTime,
    poolId,
    quoteAsset,
    startTime
  }: {
    baseAsset: string;
    endTime?: Timestamp;
    poolId: number;
    quoteAsset: string;
    startTime?: Timestamp;
  }): Promise<ArithmeticTwapResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_arithmetic_twap: {
        base_asset: baseAsset,
        end_time: endTime,
        pool_id: poolId,
        quote_asset: quoteAsset,
        start_time: startTime
      }
    });
  };
  queryMap = async ({
    key
  }: {
    key: string;
  }): Promise<QueryMapResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_map: {
        key
      }
    });
  };
}
export interface NodeTestsInterface extends NodeTestsReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setMap: ({
    key,
    value
  }: {
    key: string;
    value: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  executeSwapExactAmountIn: ({
    routes,
    tokenIn,
    tokenOutMinAmount
  }: {
    routes: SwapAmountInRoute[];
    tokenIn?: Coin;
    tokenOutMinAmount: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class NodeTestsClient extends NodeTestsQueryClient implements NodeTestsInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setMap = this.setMap.bind(this);
    this.executeSwapExactAmountIn = this.executeSwapExactAmountIn.bind(this);
  }

  setMap = async ({
    key,
    value
  }: {
    key: string;
    value: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_map: {
        key,
        value
      }
    }, fee, memo, funds);
  };
  executeSwapExactAmountIn = async ({
    routes,
    tokenIn,
    tokenOutMinAmount
  }: {
    routes: SwapAmountInRoute[];
    tokenIn?: Coin;
    tokenOutMinAmount: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      execute_swap_exact_amount_in: {
        routes,
        token_in: tokenIn,
        token_out_min_amount: tokenOutMinAmount
      }
    }, fee, memo, funds);
  };
}