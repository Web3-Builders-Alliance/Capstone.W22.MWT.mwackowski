/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, SwapAmountInRoute, Coin, QueryMsg, Timestamp, MigrateMsg, ArithmeticTwapResponse, QueryEpochsInfoResponse, EpochInfo, Duration, QueryMapResponse, QueryNumPoolsResponse, QueryPoolResponse, Any, QueryPoolParamsResponse } from "./NodeTests.types";
export interface NodeTestsMessage {
  contractAddress: string;
  sender: string;
  setMap: ({
    key,
    value
  }: {
    key: string;
    value: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  executeSwapExactAmountIn: ({
    routes,
    tokenIn,
    tokenOutMinAmount
  }: {
    routes: SwapAmountInRoute[];
    tokenIn?: Coin;
    tokenOutMinAmount: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class NodeTestsMessageComposer implements NodeTestsMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setMap = this.setMap.bind(this);
    this.executeSwapExactAmountIn = this.executeSwapExactAmountIn.bind(this);
  }

  setMap = ({
    key,
    value
  }: {
    key: string;
    value: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_map: {
            key,
            value
          }
        })),
        funds
      })
    };
  };
  executeSwapExactAmountIn = ({
    routes,
    tokenIn,
    tokenOutMinAmount
  }: {
    routes: SwapAmountInRoute[];
    tokenIn?: Coin;
    tokenOutMinAmount: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          execute_swap_exact_amount_in: {
            routes,
            token_in: tokenIn,
            token_out_min_amount: tokenOutMinAmount
          }
        })),
        funds
      })
    };
  };
}